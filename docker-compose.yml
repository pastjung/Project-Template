services:
  react-app:
    build:
      context: ./react-app
      # dockerfile : Dockerfile       # 배포용 도커 파일
      dockerfile : dockerfile.dev   # 개발용 도커 파일
    image: 'react-image:latest'
    container_name: 'react-container'
    restart: always
    stdin_open: true
    tty: true
    volumes:
      - ./react-app/src:/react-app/src
    depends_on:
      # - springboot-app
      - fastapi-app
    ports:
      - ${REACT_HOST_PORT}:${REACT_SERVER_PORT}
    env_file:
      - ./react-app/.env
    networks:
      - inha

  # springboot-app:
  #   build:
  #     context: ./springboot-app
  #     # dockerfile : Dockerfile         # 배포용 도커 파일
  #     dockerfile : ./dockerfile.dev   # 개발용 도커 파일
  #   image: 'springboot-image:latest'
  #   container_name: 'springboot-container'
  #   restart: always
  #   stdin_open: true
  #   tty: true
  #   volumes:
  #     - ./springboot-app:/springboot-app
  #     - ./springboot-app/.env:/.env
  #   ports:
  #     - ${SPRINGBOOT_HOST_PORT}:${SPRINGBOOT_SERVER_PORT}
  #   env_file:
  #     - ./springboot-app/.env
  #   depends_on:
  #     # - mysql
  #     # - mariadb
  #     - mongodb
  #   networks:
  #     - inha

  fastapi-app:
    build:
      context: ./fastapi-app
      # dockerfile: ./dockerfile      # 배포용 도커 파일
      dockerfile: ./dockerfile.dev  # 개발용 도커 파일
    image: 'fastapi-image:latest'
    container_name: 'fastapi-container'
    restart: always
    stdin_open: true
    tty: true
    volumes:
      - ./fastapi-app:/fastapi-app  # 프로젝트와 컨테이너를 마운트 시켜 즉각적으로 반영되도록 설정
    ports:
      - ${FASTAPI_HOST_PORT}:${FASTAPI_SERVER_PORT}
    env_file:
      - .env
    networks:
      - inha

  # mysql:
  #   image: 'mysql:latest'
  #   container_name: 'mysql-container'
  #   restart: always
  #   environment:
  #     MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD} # 루트 사용자 비밀번호
  #     MYSQL_DATABASE: ${MYSQL_DATABASE}           # 자동 생성할 DB 이름
  #     MYSQL_USER: ${MYSQL_USER}
  #     MYSQL_PASSWORD: ${MYSQL_PASSWORD}
  #   env_file:
  #     - .env
  #   ports:
  #     - ${MYSQL_HOST_PORT}:${MYSQL_SERVER_PORT}
  #   volumes:
  #     - ./db-data/mysql-data:/var/lib/mysql
  #   networks:
  #     - inha

  # mariadb:
  #   image: 'mariadb:latest'
  #   container_name: 'mariadb-container'
  #   restart: always
  #   environment:
  #     MYSQL_ROOT_PASSWORD: ${MARIADB_ROOT_PASSWORD}
  #     MYSQL_DATABASE: ${MARIADB_DATABASE}
  #     MYSQL_USER: ${MARIADB_USER}
  #     MYSQL_PASSWORD: ${MARIADB_PASSWORD}
  #   ports:
  #     - ${MARIADB_HOST_PORT}:${MARIADB_SERVER_PORT}
  #   env_file:
  #     - .env
  #   volumes:
  #     - ./db-data/mariadb-data:/var/lib/mysql
  #   networks:
  #     - inha

  # mongodb:
  #   image: 'mongo:latest'
  #   container_name: 'mongodb-container'
  #   restart: always
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
  #     MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
  #     MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
  #     MONGO_INITDB_AUTHDB: ${MONGO_INITDB_AUTHDB} # 인증에 사용할 데이터베이스를 지정
  #   ports:
  #     - ${MONGODB_HOST_PORT}:${MONGODB_SERVER_PORT}
  #   volumes:
  #     - ./db-data/mongodb-data:/data/db
  #   networks:
  #     - inha

networks:
  inha:
    name: inha